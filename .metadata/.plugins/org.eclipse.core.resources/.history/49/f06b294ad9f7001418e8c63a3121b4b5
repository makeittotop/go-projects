package main

import (
    "fmt"
    "net/http"
    "log"
    //"io/ioutil"
    //"strings"
    "database/sql"
)

func setup_db() (db *sql.DB) {
    //db, err := sql.Open("postgres", "user=ec2-user password=test dbname=twilio sslmode=disable")	
    db, err := sql.Open("postgres", "postgres://ec2-user:test@localhost:8887/twilio?sslmode=disable")
	panic_if(err)
	return	
}

func query_db(db *sql.DB, query string) (rows *sql.Rows){
	rows, err := db.Query(query)
	panic_if(err)
	return
}

func panic_if(err error) {
	if err != nil {
		panic(err)
	}
}

func print_rows(rows *sql.Rows) {
	panic_if(rows.Err())
	for rows.Next() {
		/*
		var id int
		var str string
		if err := rows.Scan(&id, &str); err != nil {
			log.Fatal(err)
		}
		fmt.Printf("%d is '%s'\n", id, str)
		*/
		var to, from, account_sid, sms_sid, sms_status, message_sid, message_status string
		err := rows.Scan(&to, &from, &account_sid, &sms_sid, &sms_status, &message_sid, &message_status)
		panic_if(err)
		fmt.Printf("%s, %s, %s, %s, %s, %s, %s\n"); 
	}
}

func main() {
	http.HandleFunc("/", func(w http.ResponseWriter, req *http.Request) {
		fmt.Println("==================")
		fmt.Println("Received a req ...")

		// Parse req form
		err := req.ParseForm()
		panic_if(err)
		
		/*
		// Method
		fmt.Printf("Method: %s\n", req.Method)
			
		// Referer
		fmt.Printf("Referer: %s\n", req.Referer());
			
		// Sender
		fmt.Printf("Sender: %s\n", req.RemoteAddr)
			
		// Request Path
		fmt.Printf("Requested URI path: %s\n", req.URL.RequestURI());
			
		// Content length
		fmt.Printf("Content length: %d\n", req.ContentLength)
			
		// Header
		fmt.Printf("Header:\n");
		for k, v := range req.Header {
			fmt.Printf("  %s: %s\n", k, v)
		}
			
		// Body
		body, err := ioutil.ReadAll(req.Body)
		body_str := strings.Trim(string(body), "\n")
		//if body_str != "" {
		fmt.Printf("Body: %s\n", body_str);
		//}
			
		// Form data
		if req.Form != nil {
			fmt.Println("Form data: ");
			for k, v := range req.Form {
			    fmt.Printf("  %s -> %s\n", k, v);
			}
		}
			
		// Post form data
		if req.PostForm != nil {
			fmt.Println("Post form data: ");
			for k, v := range req.PostForm {
			    fmt.Printf("  %s -> %s\n", k, v);	
			}	
		}    	
		*/
		
		// Post form data
		var post_data = make(map[string][]string)
		if req.PostForm != nil {
			for k, v := range req.PostForm {
			    //fmt.Printf("  %s -> %s\n", k, v);	
			    post_data[k] = v
			}	
		}		
		
		db := setup_db()
	    //rows := query_db(db, "SELECT * FROM sms.test")
	    rows := query_db(db, "SELECT * FROM sms.data")
	    print_rows(rows)
	    
		fmt.Println("==================")

	})
	
	fmt.Println("Starting the web server running on 9999 ...")
	log.Fatal(http.ListenAndServe(":9999", nil))
}
